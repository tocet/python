# -*- coding: utf-8 -*-
"""python_ex02_intro_extension.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RCCuN41a2NFVloY4U6Rq1ksIKoDLaT5y

**Introduction to Python programming - extension / Rozszerzenie wprowadzenia do programowania w języku Python**

ver. 2025.10

**Unpacking operator / Operator wypakowania**
"""

numbers: tuple[str, ...] = ('One','Two','Three','Four','Five')
first, *_, last = numbers
print(first, last)

numbers: tuple[str, ...] = ('One','Two','Three','Four','Five')
first, *_, second_to_last, last = numbers
print(second_to_last)

numbers: tuple[str, ...] = ('One','Two','Three','Four','Five')
first, *middle, last = numbers
print(middle)
print(type(middle))

numbers: list[int] = [1,2,3,4,5,6,7,8,9,10]
*leftover, last = numbers
print(leftover)
print(type(leftover))
print(last)
print(type(last))

"""**Keyword *is* vs ==**

https://www.w3schools.com/python/ref_keyword_is.asp
"""

a: int = 1
b: int = 2

print(a == b)
print(id(a))
print(id(b))

a: int = 1
b: int = 2

print(a is b)
print(id(a))
print(id(b))

alias_a = a
print(a is alias_a)
print(id(a))
print(id(alias_a))

a = [1,2,3]
b = [1,2,3]

print(a==b)
print(a is b)

"""**Creating Lists Faster / Szybsze tworzenie list**"""

# Commented out IPython magic to ensure Python compatibility.
# %timeit list_1 = list()
# %timeit list_2 = []

from dis import dis

dis("[]")
dis("list()")

"""**Set or List / Zbiór czy lista**"""

# Commented out IPython magic to ensure Python compatibility.
# %timeit my_list = list(range(1000))
# %timeit my_set = set(range(1000))

# Commented out IPython magic to ensure Python compatibility.
my_list = list(range(1000))
# %timeit 0 in my_list
# %timeit 1 in my_list
# %timeit 10 in my_list
# %timeit 100 in my_list
# %timeit 9999 in my_list

# Commented out IPython magic to ensure Python compatibility.
my_set = set(range(1000))
# %timeit 0 in my_set
# %timeit 1 in my_set
# %timeit 10 in my_set
# %timeit 100 in my_set
# %timeit 9999 in my_set

"""**Strings - add or join / Obiekty typu String - konkatenacja czy łączenie**"""

# Commented out IPython magic to ensure Python compatibility.
strs = ['Life', 'is', 'short,', 'I', 'use', 'Python']

def join_strs(strs):
    result = ''
    for s in strs:
        result += ' ' + s
    return result[1:]

# %timeit join_strs(strs)

def join_strs_better(strs):
    return ' '.join(strs)

# %timeit join_strs_better(strs)

"""**One-Liners for String Manipulation**

https://www.kdnuggets.com/15-useful-python-one-liners-string-manipulation
"""

t_str = ["this", "is", "python", "course"]
uppercase_string = [s.upper() for s in t_str]
print(uppercase_string)

fruits = ["apple", "banana", "cherry", "apricot", "blueberry"]
filtered = [s for s in fruits if "ap" in s]
print(filtered)

strings = ["  fun ", " funky "]
trimmed_strings = [s.strip() for s in strings]
print(trimmed_strings)

to_do = ["code", "debug", "refactor"]
reversed_strings = [task[::-1] for task in to_do]
print(reversed_strings)

strings = ["code", "debug", "test"]
prefixed_strings = [f"py-{s}" for s in strings]
print(prefixed_strings)

strings = ["learn python", "python is fun"]
split_strings = [s.split() for s in strings]
print(split_strings)

strings = ["Learn C", "Code in C"]
replaced_strings = [string.replace("C", "Python") for string in strings]
print(replaced_strings)

strings = ["Apple", "banana", "Cherry", "date"]
sorted_strings = sorted(strings, key=lambda s: s.lower())
print(sorted_strings)

"""**The Walrus Operator :=**"""

data = [1, 2, 3, 4, 10]

if (avg := sum(data) / len(data)) > 3:
    print(f"Average is {avg}")