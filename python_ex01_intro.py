# -*- coding: utf-8 -*-
"""python_ex01_intro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M_hObQw6W7H2TI48vNCzMTfS07ia_a4G

**Ex 1. Scalar objects / Typy danych skalarnych**
"""

number = 10
type(number)

number = 1.0
type(number)

bool_var = True   # False
type(bool_var)

number: int = 1
Number: float = 1.0
print(number)
print(Number)

number: str = 1
Number: int = 1.0
print(number)
print(type(number))
print(Number)

"""**Ex 2. Print - printing the message to the standard output device / wyświetlanie w konsoli**"""

x, y, z = 0, 2.0, 5
print('x = ',x)
print('y = {:.2f}'.format(y))
print(f'z = {y*z}')

var: int = 10
print(f'{var=}')

print(f'{5+5=}')
print(f'{5 + 5 = }')

var: float = 3.1415926
print(f'{var:.4f}')

var: float = 0.4526
print(f'{var:.2%}')
print(f'{var:.1%}')

var: int = 2_000_000_000_000
print(var)
print(f'{var:,}')
print(f'{var:_}')

# nested f-strings
print(f'{2*2} {f"{3*3}"}')

#***
txt: str = 'Python'
print(f'{txt:_>10}')
print(f'{txt:*^10}')
print(f'{txt:_<10}')

txt: str = 'Python'
print(f'{txt:>10}')
print(f'{txt:^10}')
print(f'{txt:<10}: is script language')

txt: str = 'Python'
idx: int = 15
print(f'{txt:>{idx}}')
print(f'{txt:^{idx+5}}')
print(f'{txt:{idx}}')

"""**Ex 3. Arithmetic operators / Operatory matematyczne**

https://www.w3schools.com/python/python_operators.asp
"""

# Division - integer
print(7//4)
# Division - modulus / reminder
print(7%4)
# Exponentiation
print(2**5)

"""**Ex 4. Strings / Obiekty typu string**

https://www.w3schools.com/python/python_strings.asp
"""

a = "Python"
b = "language"
c = a + b
print(c)
c = a + " " + b
print(c)
c = 2 * a + b
print(c)

a = "Python"
print(len(a))
print(a[0])
print(a[1])
print(a[-1])
print(a[-2])

"""**Ex 5. Modify strings / Praca z obiektami typu string**"""

# String slicing - substrings
a = "Python languages"
print(a[2:5])   # [start:stop]
print(a[0:8:3]) # [start:stop:step]
print(a[::2])
print(a[::-1])
print(a[6:2:-2])
print(a[4:1])

a = "Python language"
print(a)
print(a[2])

# String are immutable
a = "Python language"
a[2]='X'

a = "Python language"
a = a[:2] + "X" + a[3:]
print(a)

x = input("Enter text: ")
print(2*x)

"""**Ex 6. from ... import - Python modules / Dodanie modułu/biblioteki**

https://www.w3schools.com/python/python_modules.asp
"""

import datetime

this_minute = datetime.datetime.today().minute
print(this_minute)

from datetime import datetime

this_minute = datetime.today().minute
print(this_minute)

"""**Ex 7. from ... import ... as - Python modules / Dodanie modułu/biblioteki**"""

from datetime import datetime as dt

this_minute = dt.today().minute
print(this_minute)

from datetime import datetime as dt
now: datetime = dt.now()
print(f'{now:%x}')
print(f'{now:%c}')
print(f'{now:%H:%M:%S}')

"""**Ex 8. Conditions and If statements / Instrukcja warunkowa (if ... elif ... else)**

https://www.w3schools.com/python/python_conditions.asp
"""

import time as t

today = t.strftime("%A")
if today == "Saturday":
  print("Python course")
elif today == "Sunday":
  print("No Python classes")
else:
  print("No classes at all")

if today != "Sonnabend":
  print("Please use English")

a = 5
b = 10
if a>3 and b<8:
  print("True")
else:
  print("False")

if a>3 or b<8:
  print("True")
else:
  print("False")

found = False
if not found:
  print("It is working")
else:
  print("No it isn't")

"""**Ex 9. Python For Loops / Pętla for**

https://www.w3schools.com/python/python_for_loops.asp
"""

for i in [1,2,3,5]:
    print(i)
print("----------")

for i in "Python":
    print(i)
print("----------")

for i in range(4):
  print(i)
  print("Python")
print("----------")

print(range(4))

print(list(range(4)))

print(list(range(4,10)))

print(list(range(0,8,2)))

print(list(range(8,0,-2)))

items = ['a','b','c','d','e']

for item in items:
  if item == 'b':
    items.remove('b')   # ['a','c','d','e']
  else:
    print(item)

items = ['a','b','c','d','e']
new_items = []

for item in items:
  if item == 'b':
    continue
  else:
    print(item)
    new_items.append(item)

"""**Ex 10. The while loop / Pętla while**

https://www.w3schools.com/python/python_while_loops.asp
"""

# while
counter = 0

while counter < 3:
    print("Inside while")
    counter += 1
else:
    print("Inside else")

# do-while
while True:
    number = int(input("Enter a positive number: "))
    if number > 0:
        print("OK")
        break
    print('Negative number')

# pass
while int(input("Enter an number geater than 10: ")) <= 10:
  pass
print("Ok")

"""**Ex 11. match-case**"""

def weekday(n):
   match n:
      case 0: return "Monday"
      case 1: return "Tuesday"
      case 2: return "Wednesday"
      case 3: return "Thursday"
      case 4: return "Friday"
      case 5: return "Saturday"
      case 6: return "Sunday"
      case _: return "Invalid day number"

print(weekday(3))
print(weekday(6))
print(weekday(7))

"""**Ex 12. Binary conversion / Reprezentacja binarna**"""

x = 0
for i in range(10):
  x += 0.1
print(x==1)
print(x, '==', 10*0.1)

"""**Ex 13. List / Lista**

https://www.w3schools.com/python/python_lists.asp
"""

temps = [ 0.0, 100.0, -17.78, 27.5, 37.78, 7.39 ]
print(temps)
car_details = [ 'Kia', 'Sportage', 1.6, 3200]
print(car_details)
list_of_lists = [ [ 1, 2, 3], ['a', 'b', 'c' ], [ 'One','Two','Three' ] ]
print(list_of_lists)

list_1 = [1,2,3]
list_2 = [4,5,6,7,8]

print(list_1 + list_2)
max(list_2)
print(len(list_1))
print(list_1[0])
list_1[0] = 10    # mutability
print(list_1)
print(list_2[-1])

vowels = ['a', 'e', 'i', 'o', 'u']
word = input("Write a word: ")
found = []
for letter in word:
    if letter in vowels:
        if letter not in found:
            found.append(letter)

for vowel in found:
    print(vowel)

"""**Ex 14. Remove list items / Lista - usuwanie elementów**"""

numbers = [1,2,4,8]
print(numbers)

# usuniecie elementu o okreslonej wartosci
numbers.remove(4)
print(numbers)

# usuniecie elementu o okreslonym indeksie
del_num = numbers.pop(1)
print(numbers)
print(del_num)

#usuniecie
del numbers[0]
print(numbers)

# The id() function returns a unique id for the specified object.
list_1 = [1,2,3]
list_2 = list_1[:]
print(id(list_1))
print(id(list_2))

list_1.append(4)
list_2.append(4)
print(id(list_1))
print(id(list_2))

list_1.clear()
list_2 = []
print(id(list_1))
print(id(list_2))

"""**Ex 15. Add list items / Lista - dodawanie elementów**"""

numbers = []
print(len(numbers))

numbers.append(10)
print(numbers)

numbers = [1,2,3,4]
print(numbers)

# rozszerzenie o liste obiektów
numbers.extend([5,6])
print(numbers)

numbers.extend([[20,21],[31,32]])
print(numbers)

# rozszerzenie o obiekt (5) wstawiony PRZED indeksem(0)
numbers.insert(0,5)
print(numbers)

numbers.insert(1,25)
print(numbers)

numbers = [1,2,3,4]
print(numbers)

numbers.append([5,6])
print(numbers)

#In Python everythins is an object
numbers = [1,2,3,4]
print(numbers)
numbers = numbers.append(100)
print(numbers)

"""**Ex 16. Copy a list / Lista - kopiowanie**"""

numbers = list(range(10))
numbers2 = numbers          # alias, copy.deepcopy
numbers3 = numbers.copy()
print(numbers)
print(numbers2)
print(numbers3)

numbers.append(100)
print(numbers)
print(numbers2)
print(numbers3)

numbers = list(range(10))
numbers2 = numbers[:]
numbers2.append(100)
print(numbers)
print(numbers2)

"""**Ex 17. List - slicing / Lista - wycinki**"""

s_letters = "AbCdEfGh"
letters = list(s_letters)
print(s_letters)
print(letters)

print(letters[0])
print(letters[2])
print(letters[-1])
print(letters[-3])

print(letters[3:])
print(letters[:2])
print(letters[::2])
print(letters[1:3])
print(letters[0:7:2])

for ch in letters:
    print('\t',ch)

for ch in letters[0:7:2]:
    print('\t \t',ch)

my_list = [1,3,5,7]
my_list = [i+1 for i in my_list]
print(my_list)

my_list = [1,3,4,5,7,8]
my_list = [i for i in my_list if i % 2 == 0]
print(my_list)

my_list = [1,3,4,5,7,8]
my_list = ['Even' if i%2 == 0 else 'Odd' for i in my_list]
print(my_list)

my_list = [1,3,4,5,7,8]
def func(i):
    if i % 2 == 0: return 'Even'
    else: return 'Odd'
new_list = [func(i) for i in my_list]
print(new_list)

my_list = list(range(4))
print(my_list)
for l in my_list:
  my_list = my_list + my_list
  print(my_list)

# String to list
s = "This is Python course"
l = list(s)
print(l)
l = s.split(' ')
print(l)

letters = list("AbCdEfGh")
print(letters)

a = ''.join(letters)
print(f'a = {a}')
b = '_'.join(letters)
print(f'b = {b}')
c = '**'.join(letters)
print(f'c = {c}')
print(''.join(letters[-3:]))
print(''.join(letters[::-1]))

print(''.join([1,2,3]))

l = [4,2,1,19]
print(l)
l.sort()
print(l)
l.reverse()
print(l)

l = [4,2,1,19]
sorted_l = l.sort()
print(f'l = {l}')
print(f'sorted_l = {sorted_l}')

"""**Ex 18. Dictionary / Słownik**

https://www.w3schools.com/python/python_dictionaries.asp
"""

t_dict = {2:100}
print(t_dict)

t_dict = {'number':100}
print(t_dict)

number_1 = 2
t_dict = {(number_1,):['1','2','3']}
print(t_dict)

#key - any immutable object - str,int,float,bool,tuple
#key - must be unique
number_1 = 2
t_dict = {['1','2','3']:(number_1,)}
print(t_dict)

person = {'Name': 'Tom',
          'Phone': '123456789',
          'Occupation': 'engineer',
          'Home planet': 'Earth'}
print(person)
print(person['Home planet'])

person['Age'] = '21'
print(person)

#vowels = {'a' : 0, 'e' : 0, 'i' : 0, 'o' : 0, 'u' : 0}
vowels = ['a','e','i','o','u']
found_vowels ={}
word = input("Enter Your word: ")
for letter in word:
    if letter in vowels:
        found_vowels.setdefault(letter,0)
        found_vowels[letter] += 1

#k:v -> key:values / k:v -> klucz:wartość
for k, v in sorted(found_vowels.items()):
    print(k, 'found', v, 'times')

# keys only / tylko klucze
for key in person.keys():
  print(key.title())

# values only / tylko wartości
for val in person.values():
  print(val.title())

del person['Occupation']
print(person)

print(person.get('Occupation','Key does not exist'))

t_dict = {'Grade_1':'5.0',
          'Grade_2':'4.5',
          'Grade_3':'4.0'}

print('Grade_2' in t_dict)
print('5.0' in t_dict)

t_dict = {"quiz_1":{'q1':[0,1,0,1],'q2':[1,1,1,0],'q3':[0,0,1,0]},
          "quiz_2":{'q1':[1,1,0,1],'q2':[0,1,0,0],'q3':[1,0,0,0]}}

print(t_dict['quiz_1']['q1'][2])

"""**Ex 19. Set / zbiór**

https://www.w3schools.com/python/python_sets.asp
"""

#no duplicates
vowels = set('aeiou')
print(f'vowels set: {vowels}')

word = input("Enter Your word: ")

sum_sets = vowels.union(set(word))
print(sum_sets)

diff_sets = vowels.difference(set(word))
print(diff_sets)

common_part=vowels.intersection(set(word))
print(common_part)

set_a: set[int] = {1, 2, 3}
set_b: set[int] = {2, 3, 4}

print(set_a - set_b)
print(set_b - set_a)

set_a: set[int] = {1, 2, 3}
set_b: set[int] = {2, 3, 4}

print(set_a & set_b)

set_a: set[int] = {1, 2, 3}
set_b: set[int] = {2, 3, 4}

print(set_a | set_b)

set_a: set[int] = {1, 2, 3}
set_b: set[int] = {2, 3, 4}

print(set_a ^ set_b)

set_a: set[int] = {1, 2, 3, 4}
set_b: set[int] = {1, 2, 3}

print(set_a == set_b)
print(set_a >= set_b)
print(set_a <= set_b)

set_a: set[int] = {1, 2, 3}
set_b: set[int] = {1, 2, 3, 4}

print(set_a == set_b)
print(set_a >= set_b)
print(set_a <= set_b)

set_a: set[int] = {1, 2, 3, 4}
set_b: set[int] = {1, 3, 4}

set_a.difference_update(set_b)  # set_a -= set_b
print(set_a)

set_a: set[int] = {1, 2, 3, 4, 5}

set_a.discard(2)
print(set_a)
set_a.discard(10)
print(set_a)

try:
  set_a.remove(10)
  print(set_a)
except:
  print(f'10 is not in {set_a}')

"""**Ex 20. Tuple / Krotka**

https://www.w3schools.com/python/python_tuples.asp
"""

#tuple vs string
t = ('P','y','t','h','o','n')
print(t)
t = ('Python')
print(type(t))
t = ('Python',)
print(t)
print(type(t))

# tuple - indexable, immutable(it is not possible to change value of any component)
t_1 = (2)
print(type(t_1))
t_2 = (2,)
print(type(t_2))

t = (1,'tuple',2,5,6)
print(t[0])
print(t[1])
print(t[1:3])
for e in t:
  print(e)

# swap variables
x = 1
y = 2
(x,y) = (y,x)
print(x)
print(y)

# return more than 1 value from a function
def quotient_and_reminder(x,y):
  q = x // y
  r = x % y
  return (q,r)
result = quotient_and_reminder(7,2)
print(result[0],result[1])

(c,v) = (0,0)
t=(c,v)
c+=1
print((c,v))
t[0]+=1
type((c,v))

"""**Ex 21. Function / Funkcje**

https://www.w3schools.com/python/python_functions.asp
"""

def search4vowels():
    vowels = set('aeiou')
    word = input("Enter a word in which you want to search for vowels: ")
    found = vowels.intersection(set(word))
    for vowel in found:
        print(vowel)

search4vowels()

def search4vowels(word):
    vowels = set('aeiou')
    found = vowels.intersection(set(word))
    return bool(found)

print(search4vowels("Test"))

def search4vowels(word, a = 1):
    vowels = set('aeiou')
    return vowels.intersection(set(word))

print(search4vowels("atest"))

"""**Ex 22. Recursion / Funkcja rekurencyjna**"""

def change(phrase, position):
    if phrase[position].isupper():
        phrase = phrase[0:position] + phrase[position].lower() + phrase[position+1:]
    else:
        phrase = phrase[0:position] + phrase[position].upper() + phrase[position+1:]
    if position == len(phrase)-1: return phrase;
    return change(phrase, position+1)

txt = "Long long time ago. In the galaxy far away..."
print(change(txt, 0))

def sum_list(t_list):
  if len(t_list) == 1:
    return t_list[0]
  else:
    return t_list[0] + sum_list(t_list[1:])

t_list = list(range(11))
print(t_list)
print(sum_list(t_list))

def rev_list(t_list):
  if len(t_list) == 1:
    return t_list
  else:
    return rev_list(t_list[1:]) + [t_list[0]]

t_list = [[1,2],[3,4,5],['a','j','k']]
print(t_list)
print(rev_list(t_list))

"""**Ex 23. Help**"""

def search4letters(word:str, letters:str="aeiou") -> set:
    """
    Looks up letters in input word / Wyszukuje litery w słowie wejściowym
    If 2nd argument is missing, looks up vowels / W przypadku braku 2 argumentu, wyszukuje samogłoski
    """
    return set(letters).intersection(set(word))

help(search4letters)
print(search4letters("atest"))

"""**Ex 24. Fuction is an object / Funkcja jest obiektem**"""

a = print(5)
print(a)

def is_even(x):
  return x%2 == 0

new_fun = is_even
new_fun(3)

def calc(op,a,b):
  return op(a,b)

def add(a,b):
  return a+b

def mul(a,b):
  return a*b

print(calc(add,2,3))
print(calc(mul,10,2))

def add_2(a):
  return a+2

def add2even(c):
  if c%2 == 0:
    return add_2(c)
  else:
    return 'Did not increase'

print(add2even(42))
print(add2even(1))

"""**Ex 25. Functions - access to variables/ Funkcje - dostęp do zmiennych - poziomy widoczności**"""

print("Function 1")
def f(y):
  x = 1
  x += 1
  print(x)

x = 10
f(x)
print(x)

print("Function 2")
def g(y):
  print(x)
  print(x+1)

x = 10
g(x)
print(x)

print("Function 3")
def h(y):
  x += 1

x = 10
h(x)
print(x)

"""**Ex 26. Global variables**

https://www.w3schools.com/python/python_variables_global.asp
"""

def h(y):
  global x
  x +=1

x = 10
h(x)
print(x)

"""**Ex 27. Lambda function - anonymous function / Lambda, czyli funkcje anonimowe**

https://www.w3schools.com/python/python_lambda.asp
"""

def is_even(x):
  return x%2 == 0

print(is_even(3))

print((lambda x: x%2 == 0)(6))

"""**Ex 28. Function - variable number of arguments / Funkcje - zmienna ilość parameterów**"""

def vargs_func(*args):
    print(args)

vargs_func('a','b','c')
vargs_func(1,2,3,4,5)

def vargs_func(*args):
    print("Number of arguments:",len(args))
    for arg in args:
        print ("Value:",arg)

lista = [1,2,3,4]
vargs_func(1,lista,2,'xyz',3)

def vargs_func(**kwargs):
    print("Number of arguments:",len(kwargs))
    for key, item in kwargs.items():
        print ("Key ", key, "Value ", item)

vargs_func(a=1,b=2,c=3)

def vargs_func(*args, **kwargs):
    print("Number of parameters *args:",len(args))
    for arg in args:
        print ("Arg ", arg)

    print("Number of parameters **kwargs:",len(kwargs))
    for key, item in kwargs.items():
        print ("Key ", key, "Value ", item)

vargs_func(1,2,'x',[1,'a',2],a=1,b=2,c=3)

"""**Ex 29. Function - list as an agrument / Funkcje - przekazanie listy**"""

t_list = list(range(1,6))
print(t_list)

def add2list(list):
  list[1] = 20
  list.append(10)

add2list(t_list)
print(t_list)

t_list = list(range(1,6))
print(t_list)

def add2list(list):
  list[1] = 20
  list.append(10)

add2list(t_list[:])
print(t_list)

def print3args(arg1,arg2,arg3):
  print(f'Argument 1 = {arg1}')
  print(f'Argument 2 = {arg2}')
  print(f'Argument 2 = {arg3}')

print3args(*['one','two','three'])