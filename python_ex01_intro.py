# -*- coding: utf-8 -*-
"""python_ex01_intro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M_hObQw6W7H2TI48vNCzMTfS07ia_a4G

**Ex 1. Typy danych skalarnych (scalar objects)**
"""

type(1)

type(1.0)

print(type(False))
type(True)

"""**Ex 2. Wyświetlanie w konsoli - print**"""

x, y, z = 0, 2.0, 5
print('x = ',x)
print('y = {:.2f}'.format(y))
print(f'z = {y*z}')

"""**Ex 3. Wybrane operatory matematyczne**"""

# Dzielenie - część całkowita
print(7//4)
# Dzielnie - reszta
print(7%4)
# Potęgowanie
print(2**4)

"""**Ex 4. Obiekty typu string**"""

a = "Języki"
b = "skryptowe"
c = a + b
print(c)
c = a + " " + b
print(c)
c = 2 * a + b
print(c)

a = "Języki"
print(len(a))
print(a[0])
print(a[1])
print(a[-1])
print(a[-2])

"""**Ex 5. Praca z obiektami typu string**"""

# String slicing - substrings
a = "Języki skrytpowe"
print(a[2:5])   # [start:stop]
print(a[0:8:3]) # [start:stop:step]
print(a[::2])
print(a[::-1])
print(a[6:2:-2])
print(a[4:1])

# String are immutable
a = 'Języki skryptowe'
print(a)
a = "Języki skrytpowe"
print(a)
print(a[2])
a[2]='X'

a = "Języki skrytpowe"
a = a[:2] + "X" + a[3:]
print(a)

x = input("Enter text: ")
print(2*x)

"""**Ex 6. Dodanie modułu/biblioteki - from ... import**"""

import datetime

this_minute = datetime.datetime.today().minute
print(this_minute)

from datetime import datetime

this_minute = datetime.today().minute
print(this_minute)

"""**Ex 7. Dodanie modułu/biblioteki - from ... import ... as**"""

from datetime import datetime as dt

this_minute = dt.today().minute
print(this_minute)

"""**Ex 8. Instrukcja warunkowa - if ... elif ... else**"""

import time as t

today = t.strftime("%A")
if today == "Saturday":
    print("Python course")
elif today == "Sunday":
    print("No Python classes")
else:
    print("No classes at all")

if today != "Sonnabend":
  print("Please use English")

a = 5
b = 10
if a>3 and b<8:
  print("True")
else:
  print("False")

if a>3 or b<8:
  print("True")
else:
  print("False")

found = False
if not found:
  print("A jednak działa")
else:
  print("A jednak nie")

"""**Ex 9. Pętla for**"""

for i in [1,2,3,5]:
    print(i)
print("----------")

for i in "Python":
    print(i)
print("----------")

for i in range(4):
    print("Python")
print("----------")

print(range(4))

print(list(range(4)))

print(list(range(4,10)))

print(list(range(0,8,2)))

print(list(range(8,0,-2)))

"""**Ex 10. Pętla while**"""

# while
licznik = 0

while licznik < 3:
    print("Inside while")
    licznik += 1
else:
    print("Inside else")

# do-while
while True:
    liczba = int(input("Wprowadź liczbe dodatnią: "))
    if liczba > 0:
        print("OK")
        break
    print('Liczba ujemna')

# pass
while int(input("Podaj liczbę większą od 10: ")) <= 10:
  pass
print("Sukces")

"""**Ex 11. Wyrażenie match-case**"""

def weekday(n):
   match n:
      case 0: return "Monday"
      case 1: return "Tuesday"
      case 2: return "Wednesday"
      case 3: return "Thursday"
      case 4: return "Friday"
      case 5: return "Saturday"
      case 6: return "Sunday"
      case _: return "Invalid day number"

print (weekday(3))
print (weekday(6))
print (weekday(7))

"""**Ex 12. Reprezentacja binarna**"""

x = 0
for i in range(10):
  x += 0.1
print(x==1)
print(x, '==', 10*0.1)

"""**Ex 13. Lista**"""

#lists
temps = [ 0.0, 100.0, -17.78, 27.5, 37.78, 7.39 ]
print(temps)
car_details = [ 'Kia', 'Sportage', 1.6, 3200]
print(car_details)
list_of_lists = [ [ 1, 2, 3], ['a', 'b', 'c' ], [ 'Jeden','Dwa','Trzy' ] ]
print(list_of_lists)

vowels = ['a', 'e', 'i', 'o', 'u']
word = input("Write a word: ")
found = []
for letter in word:
    if letter in vowels:
        if letter not in found:
            found.append(letter)

for vowel in found:
    print(vowel)

"""**Ex 14. Lista - usuwanie elementów**"""

numbers = [1,2,4,8]
print(numbers)

# usuniecie elementu o okreslonej wartosci
numbers.remove(4)
print(numbers)

# usuniecie elementu o okreslonym indeksie
del_num = numbers.pop(1)
print(numbers)
print(del_num)

#usuniecie
del numbers[0]
print(numbers)

"""**Ex 15. Lista - dodawanie elementów**"""

numbers = []
print(len(numbers))

numbers.append(10)
print(numbers)

numbers = [1,2,3,4]
print(numbers)

# rozszerzenie o liste obiektów
numbers.extend([5,6])
print(numbers)

# rozszerzenie o obiekt (5) wstawiony PRZED indeksem(0)
numbers.insert(0,5)
print(numbers)

numbers.insert(1,25)
print(numbers)

"""**Ex 16. Lista - kopiowanie**"""

numbers = list(range(10))
print(numbers)
numbers2 = numbers
numbers3 = numbers.copy()
print(numbers2)
print(numbers3)
numbers.append(100)
print(numbers)
print(numbers2)
print(numbers3)

"""**Ex 17. Lista - wycinki**"""

s_letters = "AbCdEfGh"
letters = list(s_letters)
print(s_letters)
print(letters)

print(letters[0])
print(letters[2])
print(letters[-1])
print(letters[-3])

print(letters[3:])
print(letters[:2])
print(letters[::2])
print(letters[1:3])
print(letters[0:7:2])

print(''.join(letters[-3:]))
print(''.join(letters[::-1]))

for ch in letters:
    print('\t',ch)

for ch in letters[0:7:2]:
    print('\t \t',ch)

lista = [1,3,5,7]
lista = [i+1 for i in lista]
print(lista)

lista = [1,3,4,5,7,8]
lista = [i for i in lista if i % 2 == 0 ]
print(lista)

lista = [1,3,4,5,7,8]
lista = ['Parzysta' if i%2 == 0 else 'Nieparzysta' for i in lista]
print(lista)

lista = [1,3,4,5,7,8]
def func(i):
    if i % 2 == 0: return 'Parzyste'
    else: return 'Nieparzyste'
lista = [func(i) for i in lista]
print(lista)

"""**Ex 18. Słownik - dictionary**"""

person = {'Name': 'Tom',
          'Phone': '123456789',
          'Occupation': 'engineer',
          'Home planet': 'Earth'}
print(person)
print(person['Home planet'])

person['Age'] = '21'
print(person)

#vowels = {'a' : 0, 'e' : 0, 'i' : 0, 'o' : 0, 'u' : 0}
vowels = ['a','e','i','o','u']
found_vowels ={}
word = input("Enter Your word: ")
for letter in word:
    if letter in vowels:
        found_vowels.setdefault(letter,0)
        found_vowels[letter] += 1

#k:v -> klucz:wartość
for k, v in sorted(found_vowels.items()):
    print(k, 'found', v, 'times')

# tylko klucze
for key in person.keys():
  print(key.title())

# tylko wartości
for val in person.values():
  print(val.title())

del person['Occupation']
print(person)

print(person.get('Occupation','Klucz nie istnieje'))

"""**Ex 19. Zbiór - set**"""

#zbiór - nie ma duplikatów
vowels = set('aeiou')
word = input("Enter Your word: ")

sum_sets = vowels.union(set(word))
print(sum_sets)

diff_sets = vowels.difference(set(word))
print(diff_sets)

common_part=vowels.intersection(set(word))
print(common_part)

"""**Ex 20. Krotka - tuple**"""

#krotka vs string
t = ('P','y','t','h','o','n')
print(t)
t = ('Python')
print(type(t))
t = ('Python',)
print(t)
print(type(t))

# tuple - indexable, immutable(it is not possible to change value of any component)
t_1 = (2)
print(type(t_1))
t_2 = (2,)
print(type(t_2))

# swap variables
x = 1
y = 2
(x,y) = (y,x)
print(x)
print(y)

# return more than 1 value from a function
def quotient_and_reminder(x,y):
  q = x // y
  r = x % y
  return (q,r)
result = quotient_and_reminder(4,2)
print(result[0],result[1])

"""**Ex 21. Funkcje**"""

def search4vowels():
    vowels = set('aeiou')
    word = input("Podaj słowo, w którym należy wyszukać samogłoski: ")
    found = vowels.intersection(set(word))
    for vowel in found:
        print(vowel)

search4vowels()

def search4vowels(word):
    vowels = set('aeiou')
    found = vowels.intersection(set(word))
    return bool(found)

print(search4vowels("Test"))

def search4vowels(word):
    vowels = set('aeiou')
    return vowels.intersection(set(word))

print(search4vowels("atest"))

"""**Ex 22. Funkcja rekurencyjna**"""

def change(phrase, position):
    if phrase[position].isupper():
        phrase = phrase[0:position] + phrase[position].lower() + phrase[position+1:]
    else:
        phrase = phrase[0:position] + phrase[position].upper() + phrase[position+1:]
    if position == len(phrase)-1: return phrase;
    return change(phrase, position+1)

txt = "Long long time ago. In the galaxy far away..."
print(change(txt, 0))

"""**Ex 23. Funkcje - jak działa help**"""

def search4letters(word:str, letters:str="aeiou") -> set:
    """
    Wyszukuje litery w słowie wejściowym
    W przypadku braku 2 argumentu, wyszukuje samogłoski
    """
    return set(letters).intersection(set(word))

help(search4letters)
print(search4letters("atest"))

"""**Ex 24. Funkcja jest obiektem**"""

a = print(5)
print(a)

def is_even(x):
  return x%2 == 0

new_fun = is_even
new_fun(2)

def calc(op,a,b):
  return op(a,b)

def add(a,b):
  return a+b

def mul(a,b):
  return a*b

print(calc(add,2,3))
print(calc(mul,10,2))

def add_2(a):
  return a+2

def add2even(c):
  if c%2 == 0:
    return add_2(c)
  else:
    return 'Nie zwiększono'

print(add2even(2))
print(add2even(3))

"""**Ex 25. Funkcje - dostęp do zmiennych - poziomy widoczności**"""

print("Funkcja 1")
def f(y):
  x = 1
  x += 1
  print(x)

x = 10
f(x)
print(x)

print("Funkcja 2")
def g(y):
  print(x)
  print(x+1)

x = 10
g(x)
print(x)

print("Funkcja 3")
def h(y):
  x += 1

x = 10
h(x)
print(x)

"""**Ex 26. Funkcje - zmienna global**"""

def h(y):
  global x
  x +=1

x = 10
h(x)
print(x)

"""**Ex 27. Lambda, czyli funkcje anonimowe**"""

def is_even(x):
  return x%2 == 0

print(is_even(4))

print((lambda x: x%2 == 0)(12))

"""**Ex 28. Funkcje - zmienna ilość parameterów**"""

def vargs_func(*args):
    print(args)

vargs_func('a','b','c')
vargs_func(1,2,3,4,5)

def vargs_func(*args):
    print("Liczba przekazanych parametrów:",len(args))
    for arg in args:
        print ("Wartość:",arg)

lista = [1,2,3,4]
vargs_func(1,lista,2,'xyz',3)

def vargs_func(**kwargs):
    print("Number of parameters:",len(kwargs))
    for key, item in kwargs.items():
        print ("Key ", key, "Vslue ", item)

vargs_func(a=1,b=2,c=3)

def vargs_func(*args, **kwargs):
    print("Number of parameters *args:",len(args))
    for arg in args:
        print ("Arg ", arg)

    print("Number of parameters **kwargs:",len(kwargs))
    for key, item in kwargs.items():
        print ("Key ", key, "Value ", item)

vargs_func(1,2,'x',[1,'a',2],a=1,b=2,c=3)

"""**Ex 29. Funkcje - przekazanie listy**"""

t_list = list(range(1,6))
print(t_list)

def add2list(list):
  list[1] = 20
  list.append(10)

add2list(t_list)
print(t_list)

t_list = list(range(1,6))
print(t_list)

def add2list(list):
  list[1] = 20
  list.append(10)

add2list(t_list[:])
print(t_list)

def print3args(arg1,arg2,arg3):
  print(f'Argument 1 = {arg1}')
  print(f'Argument 2 = {arg2}')
  print(f'Argument 2 = {arg3}')

print3args(*['one','two','three'])